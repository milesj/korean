---
import { Word } from '@hangeul';
import type { Word as WordShape } from '../data/common';
import { extractWord } from 'src/scripts/helpers';

interface Props {
	sort?: boolean;
	words: WordShape[];
}

const { words, sort } = Astro.props;

if (sort) {
	words.sort((a, d) => {
		const a1 = Array.isArray(a.meaning) ? a.meaning[0] : a.meaning;
		const d1 = Array.isArray(d.meaning) ? d.meaning[0] : d.meaning;

		return a1.localeCompare(d1);
	});
}
---

<table>
	<thead>
		<tr>
			<th></th>
			<th>Word</th>
			<th>Translation</th>
			<th>Pronunciation</th>
		</tr>
	</thead>
	<tbody>
		{
			words.map((word) => {
				const meaning = Array.isArray(word.meaning) ? word.meaning.join(', ') : word.meaning;

				if (Array.isArray(word.word)) {
					const insts = word.word.map((w) => new Word(extractWord(w)));

					return (
						<tr>
							<td>{meaning}</td>
							<td>
								{insts.map((w, index) => (
									<>
										{index != 0 ? ' / ' : ''}
										<code>{w.text}</code>
									</>
								))}
							</td>
							<td>{insts.map((i) => i.translate()).join(' / ')}</td>
							<td>{insts.map((i) => i.pronounce()).join(' / ')}</td>
						</tr>
					);
				}

				const inst = new Word(extractWord(word.word));

				return (
					<tr>
						<td>{meaning}</td>
						<td>
							<code>{inst.text}</code>
						</td>
						<td>{inst.translate()}</td>
						<td>{inst.pronounce()}</td>
					</tr>
				);
			})
		}
	</tbody>
</table>
